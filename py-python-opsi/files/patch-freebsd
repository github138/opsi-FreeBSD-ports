diff --git OPSI/Backend/BackendManager.py OPSI/Backend/BackendManager.py
index 228f64b3..307744ee 100755
--- OPSI/Backend/BackendManager.py
+++ OPSI/Backend/BackendManager.py
@@ -56,7 +56,12 @@ from OPSI.Util.MessageBus import MessageBusClient
 
 if os.name == 'posix':
 	import grp
-	import PAM
+	try:
+		import PAM
+	except ImportError:
+		PAM = None
+		import pam
+
 	import pwd
 elif os.name == 'nt':
 	import win32net
@@ -789,44 +794,51 @@ class BackendAccessControl(object):
 		'''
 		logger.confidential(u"Trying to authenticate user {0!r} with password {1!r} by PAM", self._username, self._password)
 
-		class AuthConv:
-			''' Handle PAM conversation '''
-			def __init__(self, user, password):
-				self.user = user
-				self.password = password
-
-			def __call__(self, auth, query_list, userData=None):
-				response = []
-				for (query, qtype) in query_list:
-					logger.debug(u"PAM conversation: query {0!r}, type {1!r}", query, qtype)
-					if qtype == PAM.PAM_PROMPT_ECHO_ON:
-						response.append((self.user, 0))
-					elif qtype == PAM.PAM_PROMPT_ECHO_OFF:
-						response.append((self.password, 0))
-					elif qtype in (PAM.PAM_ERROR_MSG, PAM.PAM_TEXT_INFO):
-						response.append(('', 0))
-					else:
-						return None
-
-				return response
+		if PAM:
+			class AuthConv:
+				''' Handle PAM conversation '''
+				def __init__(self, user, password):
+					self.user = user
+					self.password = password
+
+				def __call__(self, auth, query_list, userData=None):
+					response = []
+					for (query, qtype) in query_list:
+						logger.debug(u"PAM conversation: query {0!r}, type {1!r}", query, qtype)
+						if qtype == PAM.PAM_PROMPT_ECHO_ON:
+							response.append((self.user, 0))
+						elif qtype == PAM.PAM_PROMPT_ECHO_OFF:
+							response.append((self.password, 0))
+						elif qtype in (PAM.PAM_ERROR_MSG, PAM.PAM_TEXT_INFO):
+							response.append(('', 0))
+						else:
+							return None
+
+					return response
 
 		try:
-			# Create instance
-			auth = PAM.pam()
-			auth.start(self._pamService)
-			# Authenticate
-			auth.set_item(PAM.PAM_CONV, AuthConv(self._username, self._password))
-			# Set the tty
-			# Workaround for:
-			#   If running as daemon without a tty the following error
-			#   occurs with older versions of pam:
-			#      pam_access: couldn't get the tty name
-			try:
-				auth.set_item(PAM.PAM_TTY, '/dev/null')
-			except Exception:
-				pass
-			auth.authenticate()
-			auth.acct_mgmt()
+			if PAM:
+				# Create instance
+				auth = PAM.pam()
+				auth.start(self._pamService)
+				# Authenticate
+				auth.set_item(PAM.PAM_CONV, AuthConv(self._username, self._password))
+				# Set the tty
+				# Workaround for:
+				#   If running as daemon without a tty the following error
+				#   occurs with older versions of pam:
+				#      pam_access: couldn't get the tty name
+				try:
+					auth.set_item(PAM.PAM_TTY, '/dev/null')
+				except Exception:
+					pass
+				auth.authenticate()
+				auth.acct_mgmt()
+			else:
+				auth = pam.pam()
+				auth.authenticate(self._username, self._password, self._pamService)
+				if auth.code != 0:
+					raise Exception(auth.reason)
 
 			if self._forceGroups is not None:
 				self._userGroups = set(self._forceGroups)
diff --git OPSI/System/Posix.py OPSI/System/Posix.py
index 8a8dedda..69020558 100644
--- OPSI/System/Posix.py
+++ OPSI/System/Posix.py
@@ -47,6 +47,11 @@ import copy as pycopy
 from itertools import islice
 from signal import SIGKILL
 
+try:
+	import netifaces
+except ImportError:
+	netifaces = None
+
 from OPSI.Logger import Logger, LOG_NONE
 from OPSI.Types import (forceDomain, forceInt, forceBool, forceUnicode,
 	forceFilename, forceHostname, forceHostId, forceNetmask, forceIpAddress,
@@ -375,16 +380,29 @@ def getEthernetDevices():
 	:returntype: [str]
 	"""
 	devices = []
-	with open("/proc/net/dev") as f:
-		for line in f:
+
+	if netifaces:
+		for line in netifaces.interfaces():
 			line = line.strip()
-			if not line or ':' not in line:
+			if not line:
 				continue
 
-			device = line.split(':')[0].strip()
-			if device.startswith(('eth', 'ens', 'eno', 'tr', 'br', 'enp', 'enx')):
-				logger.info(u"Found ethernet device: '{0}'".format(device))
-				devices.append(device)
+			if line.startswith(('lo')):
+				continue
+			device = line;
+			logger.info(u"Found ethernet device: '{0}'".format(device))
+			devices.append(device)
+	else:
+		with open("/proc/net/dev") as f:
+			for line in f:
+				line = line.strip()
+				if not line or ':' not in line:
+					continue
+
+				device = line.split(':')[0].strip()
+				if device.startswith(('eth', 'ens', 'eno', 'tr', 'br', 'enp', 'enx')):
+					logger.info(u"Found ethernet device: '{0}'".format(device))
+					devices.append(device)
 
 	return devices
 
@@ -413,42 +431,52 @@ def getNetworkDeviceConfig(device):
 		'deviceId': None
 	}
 
-	for line in execute(u"{ifconfig} {device}".format(ifconfig=which(u'ifconfig'), device=device)):
-		line = line.lower().strip()
-		match = re.search('\s([\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}).*', line)
-		if match:
-			result['hardwareAddress'] = forceHardwareAddress(match.group(1))
-			continue
-
-		if line.startswith('inet '):
-			logger.debug('Found inet line: {0}'.format(line))
-
-			parts = line.split(':')
-			if len(parts) == 4:
-				result['ipAddress'] = forceIpAddress(parts[1].split()[0].strip())
-				result['broadcast'] = forceIpAddress(parts[2].split()[0].strip())
-				result['netmask'] = forceIpAddress(parts[3].split()[0].strip())
-				continue
+	if netifaces:
+		addrs = netifaces.ifaddresses(device)
+		result['hardwareAddress'] = addrs[netifaces.AF_LINK][0]['addr']
+		result['ipAddress'] = addrs[netifaces.AF_INET][0]['addr']
+		result['broadcast'] = addrs[netifaces.AF_INET][0]['broadcast']
+		result['netmask'] = addrs[netifaces.AF_INET][0]['netmask']
 
-			match = re.search(
-				"^\w+\s+(?P<ipAddress>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+"
-				"\w+\s+(?P<netmask>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+"
-				"\w+\s+(?P<broadcast>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$",
-				line
-			)
+		gws = netifaces.gateways()
+		result['gateway'] = gws['default'][netifaces.AF_INET][0]
+	else:
+		for line in execute(u"{ifconfig} {device}".format(ifconfig=which(u'ifconfig'), device=device)):
+			line = line.lower().strip()
+			match = re.search('\s([\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}).*', line)
 			if match:
-				result['ipAddress'] = forceIpAddress(match.group('ipAddress'))
-				result['broadcast'] = forceIpAddress(match.group('broadcast'))
-				result['netmask'] = forceIpAddress(match.group('netmask'))
+				result['hardwareAddress'] = forceHardwareAddress(match.group(1))
 				continue
 
-			logger.error(u"Unexpected ifconfig line '%s'" % line)
+			if line.startswith('inet '):
+				logger.debug('Found inet line: {0}'.format(line))
+
+				parts = line.split(':')
+				if len(parts) == 4:
+					result['ipAddress'] = forceIpAddress(parts[1].split()[0].strip())
+					result['broadcast'] = forceIpAddress(parts[2].split()[0].strip())
+					result['netmask'] = forceIpAddress(parts[3].split()[0].strip())
+					continue
+
+				match = re.search(
+					"^\w+\s+(?P<ipAddress>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+"
+					"\w+\s+(?P<netmask>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+"
+					"\w+\s+(?P<broadcast>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$",
+					line
+				)
+				if match:
+					result['ipAddress'] = forceIpAddress(match.group('ipAddress'))
+					result['broadcast'] = forceIpAddress(match.group('broadcast'))
+					result['netmask'] = forceIpAddress(match.group('netmask'))
+					continue
+
+				logger.error(u"Unexpected ifconfig line '%s'" % line)
 
-	for line in execute(u"{ip} route".format(ip=which(u'ip'))):
-		line = line.lower().strip()
-		match = re.search('via\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sdev\s(\S+)\s*', line)
-		if match and match.group(2).lower() == device.lower():
-			result['gateway'] = forceIpAddress(match.group(1))
+		for line in execute(u"{ip} route".format(ip=which(u'ip'))):
+			line = line.lower().strip()
+			match = re.search('via\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sdev\s(\S+)\s*', line)
+			if match and match.group(2).lower() == device.lower():
+				result['gateway'] = forceIpAddress(match.group(1))
 
 	try:
 		with open('/sys/class/net/%s/device/vendor' % device) as f:
@@ -800,12 +828,13 @@ output will be returned.
 					encoding = 'utf-8'
 			logger.info(u"Using encoding '%s'" % encoding)
 
-			flags = fcntl.fcntl(proc.stdout, fcntl.F_GETFL)
-			fcntl.fcntl(proc.stdout, fcntl.F_SETFL, flags | os.O_NONBLOCK)
+			if not platform.system().lower().endswith('bsd'):
+				flags = fcntl.fcntl(proc.stdout, fcntl.F_GETFL)
+				fcntl.fcntl(proc.stdout, fcntl.F_SETFL, flags | os.O_NONBLOCK)
 
-			if captureStderr:
-				flags = fcntl.fcntl(proc.stderr, fcntl.F_GETFL)
-				fcntl.fcntl(proc.stderr, fcntl.F_SETFL, flags | os.O_NONBLOCK)
+				if captureStderr:
+					flags = fcntl.fcntl(proc.stderr, fcntl.F_GETFL)
+					fcntl.fcntl(proc.stderr, fcntl.F_SETFL, flags | os.O_NONBLOCK)
 
 			ret = None
 			while ret is None:
@@ -2931,6 +2960,12 @@ class Distribution(object):
 
 		self.distributor = self._getDistributor()
 
+		if not self.distribution:
+			self.distribution = osType
+			self._version = self.kernel.split('-')[0]
+			self.id = self.kernel
+			self.distributor = osType
+
 	@property
 	def version(self):
 		if 'errata' in self._version:
@@ -3670,7 +3705,8 @@ instead of throwing an error.
 	locations = (
 		u"/etc/init.d/dhcpd",  # suse / redhat / centos
 		u"/etc/init.d/isc-dhcp-server",  # newer debian / ubuntu
-		u"/etc/init.d/dhcp3-server"  # older debian / ubuntu
+		u"/etc/init.d/dhcp3-server",  # older debian / ubuntu
+		u"/usr/local/etc/rc.d/isc-dhcpd"  # FreeBSD
 	)
 
 	for filename in locations:
@@ -3731,7 +3767,7 @@ def getDHCPServiceName():
 	Returns `None` if no known service was detected.
 	"""
 	knownServices = (
-		u"dhcpd", u"univention-dhcp", u"isc-dhcp-server", u"dhcp3-server"
+		u"dhcpd", u"univention-dhcp", u"isc-dhcp-server", u"dhcp3-server", u"isc-dhcpd"
 	)
 
 	try:
@@ -3769,7 +3805,7 @@ service name was detected by the automatic approach.
 	if distro.distribution.strip() == u'SUSE Linux Enterprise Server':
 		return u"smb"
 
-	possibleNames = (u"samba", u"smb", u"smbd")
+	possibleNames = (u"samba", u"smb", u"smbd", u"samba_server")
 
 	for servicename in getServiceNames():
 		if servicename in possibleNames:
@@ -3816,7 +3852,10 @@ Used for testing.
 		try:
 			_serviceStatusOutput = execute(u"{0} list-unit-files".format(which("systemctl")))
 		except Exception:
-			_serviceStatusOutput = execute(u"{0} --status-all".format(which("service")))
+			if platform.system().lower().endswith('bsd'):
+				_serviceStatusOutput = execute(u"{0} -l".format(which("service")))
+			else:
+				_serviceStatusOutput = execute(u"{0} --status-all".format(which("service")))
 
 	patterns = [
 		'\[.*\]\s+(?P<servicename>.+)',  # Debian
@@ -3824,6 +3863,7 @@ Used for testing.
 		'(?P<servicename>.+) w',  # RHEL 6, part 2
 		r'(?P<servicename>([\w-]|@)+)\.service',  # systemd-based
 		'Checking the status of (?P<servicename>.+)\s+',  # opensuse 12.1
+		'(?P<servicename>.+)', # service -l FreeBSD
 	]
 	patterns = [re.compile(pattern) for pattern in patterns]
 
